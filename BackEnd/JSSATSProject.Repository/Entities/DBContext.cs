// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace JSSATSProject.Repository.Entities;

public partial class DBContext : DbContext
{
    public DBContext(DbContextOptions<DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<BuyOrder> BuyOrders { get; set; }

    public virtual DbSet<BuyOrderDetail> BuyOrderDetails { get; set; }

    public virtual DbSet<Carat> Carats { get; set; }

    public virtual DbSet<Clarity> Clarities { get; set; }

    public virtual DbSet<Color> Colors { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Cut> Cuts { get; set; }

    public virtual DbSet<Diamond> Diamonds { get; set; }

    public virtual DbSet<DiamondPriceList> DiamondPriceLists { get; set; }

    public virtual DbSet<Fluorescence> Fluorescences { get; set; }

    public virtual DbSet<Guarantee> Guarantees { get; set; }

    public virtual DbSet<Material> Materials { get; set; }

    public virtual DbSet<MaterialPriceList> MaterialPriceLists { get; set; }

    public virtual DbSet<Origin> Origins { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<Point> Points { get; set; }

    public virtual DbSet<Polish> Polishes { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductCategoryType> ProductCategoryTypes { get; set; }

    public virtual DbSet<ProductMaterial> ProductMaterials { get; set; }

    public virtual DbSet<Promotion> Promotions { get; set; }

    public virtual DbSet<PromotionRequest> PromotionRequests { get; set; }

    public virtual DbSet<PurchasePriceRatio> PurchasePriceRatios { get; set; }

    public virtual DbSet<ReturnBuyBackPolicy> ReturnBuyBackPolicies { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<SellOrder> SellOrders { get; set; }

    public virtual DbSet<SellOrderDetail> SellOrderDetails { get; set; }

    public virtual DbSet<Shape> Shapes { get; set; }

    public virtual DbSet<SpecialDiscountRequest> SpecialDiscountRequests { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<Stall> Stalls { get; set; }

    public virtual DbSet<StallType> StallTypes { get; set; }

    public virtual DbSet<Symmetry> Symmetries { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    => optionsBuilder.UseSqlServer("Data Source=LAPTOP-R16679DK;Initial Catalog=JSSATS;User ID=sa;Password=12345;Encrypt=False");


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3213E83FC7895574");

            entity.ToTable("Account");

            entity.HasIndex(e => e.Username, "UQ__Account__F3DBC57263B34CC4").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("username");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Account__role_id__31B762FC");
        });

        modelBuilder.Entity<BuyOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BuyOrder__3213E83F846F4021");

            entity.ToTable("BuyOrder");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("draft")
                .HasColumnName("status");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("total_amount");

            entity.HasOne(d => d.Customer).WithMany(p => p.BuyOrders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BuyOrder__custom__32AB8735");

            entity.HasOne(d => d.Staff).WithMany(p => p.BuyOrders)
                .HasForeignKey(d => d.StaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BuyOrder__staff___339FAB6E");
        });

        modelBuilder.Entity<BuyOrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BuyOrder__3213E83F22FE4662");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BuyOrderId).HasColumnName("buy_order_id");
            entity.Property(e => e.CategoryTypeId).HasColumnName("category_type_id");
            entity.Property(e => e.DiamondGradingCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("diamond_grading_code");
            entity.Property(e => e.MaterialId).HasColumnName("material_id");
            entity.Property(e => e.MaterialWeight)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("material_weight");
            entity.Property(e => e.PurchasePriceRatioId).HasColumnName("purchase_price_ratio_id");
            entity.Property(e => e.UnitPrice)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("unit_price");

            entity.HasOne(d => d.BuyOrder).WithMany(p => p.BuyOrderDetails)
                .HasForeignKey(d => d.BuyOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BuyOrderD__buy_o__3493CFA7");

            entity.HasOne(d => d.CategoryType).WithMany(p => p.BuyOrderDetails)
                .HasForeignKey(d => d.CategoryTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BuyOrderD__categ__3587F3E0");

            entity.HasOne(d => d.Material).WithMany(p => p.BuyOrderDetails)
                .HasForeignKey(d => d.MaterialId)
                .HasConstraintName("FK__BuyOrderD__mater__367C1819");

            entity.HasOne(d => d.PurchasePriceRatio).WithMany(p => p.BuyOrderDetails)
                .HasForeignKey(d => d.PurchasePriceRatioId)
                .HasConstraintName("FK__BuyOrderD__purch__37703C52");
        });

        modelBuilder.Entity<Carat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Carat__3213E83FF9BDE55D");

            entity.ToTable("Carat");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("weight");
        });

        modelBuilder.Entity<Clarity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Clarity__3213E83FB323002D");

            entity.ToTable("Clarity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("level");
        });

        modelBuilder.Entity<Color>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Color__3213E83FED372155");

            entity.ToTable("Color");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Customer__3213E83FEA3C9A71");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.Email, "UQ__Customer__AB6E61641F876BAE").IsUnique();

            entity.HasIndex(e => e.Phone, "UQ__Customer__B43B145F82D2CAA2").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .HasColumnType("text")
                .HasColumnName("address");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gender");
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.PointId).HasColumnName("point_id");

            entity.HasOne(d => d.Point).WithMany(p => p.Customers)
                .HasForeignKey(d => d.PointId)
                .HasConstraintName("FK__Customer__point___3864608B");
        });

        modelBuilder.Entity<Cut>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cut__3213E83FAC774C71");

            entity.ToTable("Cut");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("level");
        });

        modelBuilder.Entity<Diamond>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Diamond__3213E83FB35C79B4");

            entity.ToTable("Diamond");

            entity.HasIndex(e => e.Code, "UQ__Diamond__357D4CF9FBEE7D84").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CaratId).HasColumnName("carat_id");
            entity.Property(e => e.ClarityId).HasColumnName("clarity_id");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ColorId).HasColumnName("color_id");
            entity.Property(e => e.CutId).HasColumnName("cut_id");
            entity.Property(e => e.FluorescenceId).HasColumnName("fluorescence_id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OriginId).HasColumnName("origin_id");
            entity.Property(e => e.PolishId).HasColumnName("polish_id");
            entity.Property(e => e.ShapeId).HasColumnName("shape_id");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.SymmetryId).HasColumnName("symmetry_id");

            entity.HasOne(d => d.Carat).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.CaratId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__carat_i__395884C4");

            entity.HasOne(d => d.Clarity).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.ClarityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__clarity__3A4CA8FD");

            entity.HasOne(d => d.Color).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.ColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__color_i__3B40CD36");

            entity.HasOne(d => d.Cut).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.CutId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__cut_id__3C34F16F");

            entity.HasOne(d => d.Fluorescence).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.FluorescenceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__fluores__3D2915A8");

            entity.HasOne(d => d.Origin).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.OriginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__origin___3E1D39E1");

            entity.HasOne(d => d.Polish).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.PolishId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__polish___3F115E1A");

            entity.HasOne(d => d.Shape).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.ShapeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__shape_i__40058253");

            entity.HasOne(d => d.Symmetry).WithMany(p => p.Diamonds)
                .HasForeignKey(d => d.SymmetryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Diamond__symmetr__40F9A68C");
        });

        modelBuilder.Entity<DiamondPriceList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DiamondP__3213E83F91813101");

            entity.ToTable("DiamondPriceList");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CaratId).HasColumnName("carat_id");
            entity.Property(e => e.ClarityId).HasColumnName("clarity_id");
            entity.Property(e => e.ColorId).HasColumnName("color_id");
            entity.Property(e => e.CutId).HasColumnName("cut_id");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("effective_date");
            entity.Property(e => e.OriginId).HasColumnName("origin_id");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("price");

            entity.HasOne(d => d.Carat).WithMany(p => p.DiamondPriceLists)
                .HasForeignKey(d => d.CaratId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DiamondPr__carat__41EDCAC5");

            entity.HasOne(d => d.Clarity).WithMany(p => p.DiamondPriceLists)
                .HasForeignKey(d => d.ClarityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DiamondPr__clari__42E1EEFE");

            entity.HasOne(d => d.Color).WithMany(p => p.DiamondPriceLists)
                .HasForeignKey(d => d.ColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DiamondPr__color__43D61337");

            entity.HasOne(d => d.Cut).WithMany(p => p.DiamondPriceLists)
                .HasForeignKey(d => d.CutId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DiamondPr__cut_i__44CA3770");

            entity.HasOne(d => d.Origin).WithMany(p => p.DiamondPriceLists)
                .HasForeignKey(d => d.OriginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DiamondPr__origi__45BE5BA9");
        });

        modelBuilder.Entity<Fluorescence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Fluoresc__3213E83F43FA7E8B");

            entity.ToTable("Fluorescence");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("level");
            entity.Property(e => e.PriceRate)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("price_rate");
        });

        modelBuilder.Entity<Guarantee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Guarante__3213E83FE1594E84");

            entity.ToTable("Guarantee");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("effective_date");
            entity.Property(e => e.ExpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("expired_date");
            entity.Property(e => e.ProductId).HasColumnName("product_id");

            entity.HasOne(d => d.Product).WithMany(p => p.Guarantees)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Guarantee__produ__46B27FE2");
        });

        modelBuilder.Entity<Material>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Material__3213E83FBB9E6976");

            entity.ToTable("Material");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<MaterialPriceList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Material__3213E83F7FA742AF");

            entity.ToTable("MaterialPriceList");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BuyPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("buy_price");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("effective_date");
            entity.Property(e => e.MaterialId).HasColumnName("material_id");
            entity.Property(e => e.SellPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("sell_price");

            entity.HasOne(d => d.Material).WithMany(p => p.MaterialPriceLists)
                .HasForeignKey(d => d.MaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__MaterialP__mater__47A6A41B");
        });

        modelBuilder.Entity<Origin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Origin__3213E83F8C024E5E");

            entity.ToTable("Origin");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Payment__3213E83FB06B6605");

            entity.ToTable("Payment");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("processing")
                .HasColumnName("status");

            entity.HasOne(d => d.Customer).WithMany(p => p.Payments)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Payment__custome__489AC854");

            entity.HasOne(d => d.Order).WithMany(p => p.Payments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Payment__order_i__498EEC8D");
        });

        modelBuilder.Entity<PaymentDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PaymentD__3213E83F3BB23F44");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.ExternalTransactionCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");

            entity.HasOne(d => d.Payment).WithMany(p => p.PaymentDetails)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PaymentDe__payme__4A8310C6");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PaymentDetails)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PaymentDe__payme__4B7734FF");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PaymentM__3213E83F671F0780");

            entity.ToTable("PaymentMethod");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Point>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Point__3213E83F830CA34C");

            entity.ToTable("Point");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AvailablePoint)
                .HasDefaultValue(0)
                .HasColumnName("available_point");
            entity.Property(e => e.Totalpoint)
                .HasDefaultValue(0)
                .HasColumnName("totalpoint");
        });

        modelBuilder.Entity<Polish>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Polish__3213E83F1DC3618B");

            entity.ToTable("Polish");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("level");
            entity.Property(e => e.PriceRate)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("price_rate");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Product__3213E83FB261657D");

            entity.ToTable("Product");

            entity.HasIndex(e => e.Code, "UQ__Product__357D4CF9C83266AF").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.GemCost)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("gem_cost");
            entity.Property(e => e.Img)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("img");
            entity.Property(e => e.MaterialCost)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("material_cost");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PriceRate)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price_rate");
            entity.Property(e => e.ProductionCost)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("production_cost");
            entity.Property(e => e.StallsId).HasColumnName("stalls_id");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Product__categor__46E78A0C");

            entity.HasOne(d => d.Stalls).WithMany(p => p.Products)
                .HasForeignKey(d => d.StallsId)
                .HasConstraintName("FK__Product__stalls___47DBAE45");
        });

        modelBuilder.Entity<ProductDiamond>(entity =>
        {
            entity.HasKey(e => new { e.DiamondId, e.ProductId }).HasName("PK__ProductD__CDF418BEA247F926");

            entity.ToTable("ProductDiamond");

            entity.Property(e => e.DiamondId).HasColumnName("diamond_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");


            entity.HasOne(d => d.Diamond).WithMany(p => p.ProductDiamonds)
                .HasForeignKey(d => d.DiamondId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductDi__diamo__531856C7");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductDiamonds)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductDi__produ__5224328E");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ProductC__3213E83F13FC2986");

            entity.ToTable("ProductCategory");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.TypeId).HasColumnName("type_id");

            entity.HasOne(d => d.Type).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductCa__type___300424B4");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ProductC__3213E83FB4447E59");

            entity.ToTable("ProductCategory");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.TypeId).HasColumnName("type_id");

            entity.HasOne(d => d.Type).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductCa__type___4E53A1AA");
        });

        modelBuilder.Entity<ProductCategoryType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ProductC__3213E83F77DDE107");

            entity.ToTable("ProductCategoryType");

            entity.HasIndex(e => e.Name, "UQ__ProductC__72E12F1BB7C847EE").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
        });

        modelBuilder.Entity<ProductMaterial>(entity =>
        {
            entity.HasKey(e => new { e.MaterialId, e.ProductId }).HasName("PK__ProductM__2F8E3AF7A125BD05");

            entity.ToTable("ProductMaterial");

            entity.Property(e => e.MaterialId).HasColumnName("material_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("weight");

            entity.HasOne(d => d.Material).WithMany(p => p.ProductMaterials)
                .HasForeignKey(d => d.MaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductMa__mater__51300E55");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductMaterials)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductMa__produ__5224328E");
        });

        modelBuilder.Entity<Promotion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Promotio__3213E83FBDEB278D");

            entity.ToTable("Promotion");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DiscountRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("discount_rate");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");

            entity.HasMany(d => d.Categories).WithMany(p => p.Promotions)
                .UsingEntity<Dictionary<string, object>>(
                    "PromotionCategory",
                    r => r.HasOne<ProductCategory>().WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Promotion__categ__531856C7"),
                    l => l.HasOne<Promotion>().WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Promotion__promo__540C7B00"),
                    j =>
                    {
                        j.HasKey("PromotionId", "CategoryId").HasName("PK__Promotio__71EDBBF0FD0D8C9B");
                        j.ToTable("PromotionCategory");
                        j.IndexerProperty<int>("PromotionId").HasColumnName("promotion_id");
                        j.IndexerProperty<int>("CategoryId").HasColumnName("category_id");
                    });
        });

        modelBuilder.Entity<PromotionRequest>(entity =>
        {
            entity.HasKey(e => e.RequestId).HasName("PK__Promotio__18D3B90FA1BC9160");

            entity.ToTable("PromotionRequest");

            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.ApprovedBy).HasColumnName("approved_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DiscountRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("discount_rate");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("awating")
                .HasColumnName("status");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.PromotionRequestApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK__Promotion__appro__55009F39");

            entity.HasOne(d => d.Manager).WithMany(p => p.PromotionRequestManagers)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Promotion__manag__55F4C372");

            entity.HasMany(d => d.Categories).WithMany(p => p.Requests)
                .UsingEntity<Dictionary<string, object>>(
                    "PromotionRequestCategory",
                    r => r.HasOne<ProductCategory>().WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Promotion__categ__7B264821"),
                    l => l.HasOne<PromotionRequest>().WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Promotion__reque__7A3223E8"),
                    j =>
                    {
                        j.HasKey("RequestId", "CategoryId").HasName("PK__Promotio__45875794F049E7FA");
                        j.ToTable("PromotionRequestCategories");
                        j.IndexerProperty<int>("RequestId").HasColumnName("request_id");
                        j.IndexerProperty<int>("CategoryId").HasColumnName("category_id");
                    });
        });

        modelBuilder.Entity<PurchasePriceRatio>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Purchase__3213E83F9843E8BB");

            entity.ToTable("PurchasePriceRatio");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CategoryTypeId).HasColumnName("category_type_id");
            entity.Property(e => e.Percentage)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("percentage");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("type");

            entity.HasOne(d => d.CategoryType).WithMany(p => p.PurchasePriceRatios)
                .HasForeignKey(d => d.CategoryTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PurchaseP__categ__56E8E7AB");
        });

        modelBuilder.Entity<ReturnBuyBackPolicy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ReturnBu__3213E83FE65E0EE8");

            entity.ToTable("ReturnBuyBackPolicy");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("effective_date");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3213E83F759AA0AD");

            entity.ToTable("Role");

            entity.HasIndex(e => e.Name, "unique_role_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<SellOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SellOrde__3213E83F46A5F3FB");

            entity.ToTable("SellOrder");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.SpecialDiscountRequestId).HasColumnName("special_discount_request_id");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("total_amount");

            entity.HasOne(d => d.Customer).WithMany(p => p.SellOrders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SellOrder__custo__57DD0BE4");

            entity.HasOne(d => d.SpecialDiscountRequest).WithMany(p => p.SellOrders)
                .HasForeignKey(d => d.SpecialDiscountRequestId)
                .HasConstraintName("FK_SpecialDiscountRequest_Order");

            entity.HasOne(d => d.Staff).WithMany(p => p.SellOrders)
                .HasForeignKey(d => d.StaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SellOrder__staff__58D1301D");
        });

        modelBuilder.Entity<SellOrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SellOrde__3213E83F9A2C037A");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.PromotionId).HasColumnName("promotion_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("delivered")
                .HasColumnName("status");
            entity.Property(e => e.UnitPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("unit_price");

            entity.HasOne(d => d.Order).WithMany(p => p.SellOrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SellOrder__order__5AB9788F");

            entity.HasOne(d => d.Product).WithMany(p => p.SellOrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SellOrder__produ__5BAD9CC8");

            entity.HasOne(d => d.Promotion).WithMany(p => p.SellOrderDetails)
                .HasForeignKey(d => d.PromotionId)
                .HasConstraintName("FK_PromotionId");
        });

        modelBuilder.Entity<Shape>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Shape__3213E83F37428D6C");

            entity.ToTable("Shape");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PriceRate)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("price_rate");
        });

        modelBuilder.Entity<SpecialDiscountRequest>(entity =>
        {
            entity.HasKey(e => e.RequestId).HasName("PK__SpecialD__18D3B90FCEF2A962");

            entity.ToTable("SpecialDiscountRequest");

            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.ApprovedBy).HasColumnName("approved_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.DiscountRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("discount_rate");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("awating")
                .HasColumnName("status");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.SpecialDiscountRequestApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK__SpecialDi__appro__5D95E53A");

            entity.HasOne(d => d.Customer).WithMany(p => p.SpecialDiscountRequests)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SpecialDi__custo__5E8A0973");

            entity.HasOne(d => d.Staff).WithMany(p => p.SpecialDiscountRequestStaffs)
                .HasForeignKey(d => d.StaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SpecialDi__staff__5F7E2DAC");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Staff__3213E83FED276F6E");

            entity.HasIndex(e => e.AccountId, "UQ__Staff__46A222CCF5B0D84F").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Staff__AB6E6164742E2878").IsUnique();

            entity.HasIndex(e => e.Phone, "UQ__Staff__B43B145FA1816B9F").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Address)
                .HasColumnType("text")
                .HasColumnName("address");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gender");
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");

            entity.HasOne(d => d.Account).WithOne(p => p.Staff)
                .HasForeignKey<Staff>(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Staff__account_i__607251E5");
        });

        modelBuilder.Entity<Stall>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Stall__3213E83FB1432BBA");

            entity.ToTable("Stall");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.TypeId).HasColumnName("type_id");

            entity.HasOne(d => d.Type).WithMany(p => p.Stalls)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Stall__type_id__6166761E");
        });

        modelBuilder.Entity<StallType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__StallTyp__3213E83F70D7A6A3");

            entity.ToTable("StallType");

            entity.HasIndex(e => e.Name, "UQ__StallTyp__72E12F1B3E015EE7").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("active")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Symmetry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Symmetry__3213E83FA7DF4A00");

            entity.ToTable("Symmetry");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("level");
            entity.Property(e => e.PriceRate)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("price_rate");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}